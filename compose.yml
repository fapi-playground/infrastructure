# This docker-compose file sets up ORY Kratos, ORY Hydra, and this app in a network and configures
# in such a way that ORY Kratos is the Login Provider for ORY Hydra.

version: "3.7"

services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    # shutdown fast so we can iterate rapidly on compose.yml
    stop_grace_period: 0s
    volumes:
      - ${VOLUME_PATH}/data/nginx/conf.d:/etc/nginx/conf.d
      - ${VOLUME_PATH}/data/nginx/www:/var/www
      - ${VOLUME_PATH}/data/ssl:/etc/nginx/ssl
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      init:
        condition: service_completed_successfully
    networks:
      - intranet

  certbot:
    image: certbot/certbot:latest
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH}/data/certbot/conf:/etc/letsencrypt
      - ${VOLUME_PATH}/data/certbot/www:/var/www/certbot
      - ${VOLUME_PATH}/data/ssl:/data/ssl
    entrypoint: "/bin/sh -c 'trap exit TERM; \
                 while [ -e /etc/letsencrypt/live ]; \
                 do sleep 30; certbot --webroot -w /var/www/certbot renew; \
                 cp /etc/letsencrypt/live/$DOMAIN/*.pem /data/ssl; \
                 sleep 12h & wait $${!}; \
                 done;'"

  hydra-migrate:
    image: oryd/hydra:v2.3.0
    depends_on:
      postgres:
        condition: service_healthy
    command: migrate -c /etc/config/hydra/hydra.yml sql up -e --yes
    pull_policy: missing
    volumes:
      - type: bind
        source: ./data/hydra
        target: /etc/config/hydra
    restart: on-failure
    networks:
      - intranet

  hydra:
    image: oryd/hydra:v2.3.0
    depends_on:
      postgres:
        condition: service_healthy
      hydra-migrate:
        condition: service_completed_successfully
    healthcheck:  
      test: ["CMD-SHELL", " netstat -an | grep -q 4444"]  
      interval: 1s  
      timeout: 1s  
      retries: 10  
      start_period: 1s
    command: serve -c /etc/config/hydra/hydra.yml all
    volumes:
      - type: bind
        source: ./data/hydra
        target: /etc/config/hydra
    pull_policy: missing
    restart: on-failure
    networks:
      - intranet

  kratos-selfservice-ui-node:
    image: oryd/kratos-selfservice-ui-node:v1.3.1
    environment:
      - PORT=4455
      - SECURITY_MODE=standalone
      - BASE_PATH=/ui
      - HYDRA_ADMIN_URL=http://hydra:4445
      - KRATOS_PUBLIC_URL=http://kratos:4433
      - KRATOS_BROWSER_URL=https://auth.${DOMAIN}
      - COOKIE_SECRET=changeme # TODO: change
      - CSRF_COOKIE_NAME=ory_csrf_ui
      - CSRF_COOKIE_SECRET=changeme # TODO: change
    networks:
      - intranet
    volumes:
      - /tmp/ui-node/logs:/root/.npm/_logs
    restart: on-failure

  kratos-migrate:
    image: oryd/kratos:v1.3.1
    volumes:
      - type: bind
        source: ./data/kratos
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - intranet

  kratos:
    depends_on:
      postgres:
        condition: service_healthy
      kratos-migrate:
        condition: service_completed_successfully
    image: oryd/kratos:v1.3.1
    restart: unless-stopped
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - type: bind
        source: ${VOLUME_PATH}/data/kratos
        target: /etc/config/kratos
    networks:
      - intranet

  # dependencies for optionally generating default configs + secrets
  generate-synapse-secrets:
    image: ghcr.io/element-hq/synapse:latest
    user: $USER_ID:$GROUP_ID
    restart: "no"
    volumes:
      - ${VOLUME_PATH}/data/synapse:/data:rw
      - ${VOLUME_PATH}/init/generate-synapse-secrets.sh:/entrypoint.sh
    env_file: .env
    environment:
      SYNAPSE_CONFIG_DIR: /data
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml.default
      SYNAPSE_SERVER_NAME: ${DOMAIN}
      SYNAPSE_REPORT_STATS: ${REPORT_STATS}
    entrypoint: "/entrypoint.sh"

  # dependency for templating /data-template into /data (having extracted any secrets from any default generated configs)
  init-auth:
    build: init-auth
    user: $USER_ID:$GROUP_ID
    restart: "no"
    volumes:
      - ${VOLUME_PATH}/secrets:/secrets
      - ${VOLUME_PATH}/data:/data
      - ${VOLUME_PATH}/data-template:/data-template
      - ${VOLUME_PATH}/init-auth/init.sh:/init.sh
    command: "/init.sh"
    env_file: .env

  # dependency for creating hydra clients
  hydra-create-clients:
    build: create-clients 
    restart: "no"
    entrypoint: "/create-clients.sh"
    volumes:
      - ${VOLUME_PATH}/data/hydra/clients/:/clients/
      - ${VOLUME_PATH}/create-clients/entrypoint.sh:/create-clients.sh
    env_file: .env
    depends_on:
      generate-synapse-secrets:
        condition: service_completed_successfully
      hydra:
        condition: service_healthy
    networks:
      - intranet

  # dependency for templating /data-template into /data (having extracted any secrets from any default generated configs)
  init:
    build: init
    user: $USER_ID:$GROUP_ID
    restart: "no"
    volumes:
      - ${VOLUME_PATH}/secrets:/secrets
      - ${VOLUME_PATH}/data:/data
      - ${VOLUME_PATH}/data-template:/data-template
      - ${VOLUME_PATH}/init/init.sh:/init.sh
    command: "/init.sh"
    env_file: .env
    depends_on:
      generate-synapse-secrets:
        condition: service_completed_successfully
      hydra-create-clients:
        condition: service_completed_successfully
    networks:
      - intranet

  postgres:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
        read_only: false
      - type: bind
        source: ${VOLUME_PATH}/scripts/create-multiple-postgresql-databases.sh
        target: /docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - intranet
    environment:
      POSTGRES_MULTIPLE_DATABASES: synapse,hydra,kratos
      POSTGRES_USER: postgres # FIXME: use different username+passwords for synapse, kratos and hydra DBs.
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=C
      PGDATA: /var/lib/postgresql/data/data # otherwise it clashes with .gitkeep in the parent dir
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_period: "1s"
      interval: "1s"
      timeout: "5s"
    depends_on:
      init-auth:
        condition: service_completed_successfully

  synapse:
    image: ghcr.io/element-hq/synapse:latest
    user: $USER_ID:$GROUP_ID
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH}/data/synapse:/data:rw
    networks:
      - intranet
    environment:
      SYNAPSE_CONFIG_DIR: /data
      SYNAPSE_CONFIG_PATH: /data/homeserver.yaml
    secrets:
      - synapse_signing_key
    depends_on:
      postgres:
        condition: service_healthy
      init:
        condition: service_completed_successfully

  element-web:
    image: vectorim/element-web:latest
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost:80/version || exit 1"]
      start_period: "5s"
      interval: "15s"
      timeout: "5s"
    networks:
      - intranet
    volumes:
      - ${VOLUME_PATH}/data/element-web/config.json:/app/config.json
    depends_on:
      init:
        condition: service_completed_successfully

  jellyfin:
    image: jellyfin/jellyfin:latest
    user: $USER_ID:$GROUP_ID
    ports:
      - "8096:8096"
    volumes:
      - type: bind
        source: ${VOLUME_PATH}/media/jellyfin
        target: /media
      # Optional - extra fonts to be used during transcoding with subtitle burn-in
      - type: bind
        source: /path/to/fonts
        target: /usr/local/share/fonts/custom
        read_only: true
    restart: 'unless-stopped'
    # Optional - alternative address used for autodiscovery
    environment:
      - JELLYFIN_PublishedServerUrl=https://${DOMAIN}
    networks:
      - intranet

networks:
  intranet:

volumes:
  postgres-data:
  synapse-media:


secrets:
  postgres_password:
    file: secrets/postgres/postgres_password
  synapse_signing_key:
    file: secrets/synapse/signing.key
